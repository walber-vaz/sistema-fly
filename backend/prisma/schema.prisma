generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserType {
    CUSTOMER
    ADMIN
}

enum StatusOrder {
    PAID
    CANCELED
}

model Address {
    id           String   @id @default(uuid())
    street       String   @db.VarChar(200)
    city         String   @db.VarChar(100)
    state        String   @db.VarChar(100)
    zip          String   @db.VarChar(9)
    number       String   @db.VarChar(10)
    neighborhood String   @db.VarChar(100)
    complement   String?  @db.VarChar(100)
    createdAt    DateTime @default(now()) @db.Timestamp(6)
    updatedAt    DateTime @default(now()) @updatedAt @db.Timestamp(6)
    users        User[]

    @@index([street, city, state, zip], name: "address_index")
    @@map("tb_address")
}

model User {
    id        String   @id @default(uuid())
    email     String   @unique @db.VarChar(200)
    password  String
    firstName String   @db.VarChar(80)
    lastName  String   @db.VarChar(80)
    addressId String?
    type      UserType @default(CUSTOMER)
    isActive  Boolean  @default(true) @db.Boolean
    phone     String   @unique @db.VarChar(12)
    createdAt DateTime @default(now()) @db.Timestamp(6)
    updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)

    address    Address?   @relation(fields: [addressId], references: [id])
    orders     Order[]
    brands     Brand[]
    categories Category[]
    products   Product[]

    @@index([firstName, lastName], name: "user_name_index")
    @@index([isActive], name: "user_is_active_index")
    @@map("tb_users")
}

model Brand {
    id        String    @id @default(uuid())
    name      String    @db.VarChar(100)
    isActive  Boolean   @default(true) @db.Boolean
    userId    String
    createdAt DateTime  @default(now()) @db.Timestamp(6)
    updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(6)
    products  Product[]

    user User @relation(fields: [userId], references: [id])

    @@index([name], name: "brand_name_index")
    @@index([isActive], name: "brand_is_active_index")
    @@map("tb_brands")
}

model Category {
    id        String    @id @default(uuid())
    name      String    @db.VarChar(100)
    isActive  Boolean   @default(true) @db.Boolean
    userId    String
    createdAt DateTime  @default(now()) @db.Timestamp(6)
    updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(6)
    products  Product[]

    user User @relation(fields: [userId], references: [id])

    @@index([name], name: "category_name_index")
    @@index([isActive], name: "category_is_active_index")
    @@map("tb_categories")
}

model Product {
    id          String   @id @default(uuid())
    name        String   @db.VarChar(100)
    description String?  @db.Text
    price       Decimal  @db.Decimal(10, 2)
    priceSale   Decimal  @db.Decimal(10, 2)
    stock       Int      @default(0)
    isActive    Boolean  @default(true) @db.Boolean
    brandId     String?
    categoryId  String?
    userId      String
    createdAt   DateTime @default(now()) @db.Timestamp(6)
    updatedAt   DateTime @default(now()) @updatedAt @db.Timestamp(6)

    user       User        @relation(fields: [userId], references: [id])
    brand      Brand?      @relation(fields: [brandId], references: [id])
    category   Category?   @relation(fields: [categoryId], references: [id])
    orderItems OrderItem[]

    @@index([name], name: "product_name_index")
    @@index([isActive], name: "product_is_active_index")
    @@map("tb_products")
}

model Order {
    id          String      @id @default(uuid())
    userId      String
    total       Decimal     @db.Decimal(10, 2)
    status      StatusOrder @default(PAID)
    totalAmount Decimal     @db.Decimal(10, 2)
    createdAt   DateTime    @default(now()) @db.Timestamp(6)

    user       User        @relation(fields: [userId], references: [id])
    orderItems OrderItem[]

    @@map("tb_orders")
}

model OrderItem {
    id        String   @id @default(uuid())
    orderId   String
    productId String
    quantity  Int
    price     Decimal  @db.Decimal(10, 2)
    createdAt DateTime @default(now()) @db.Timestamp(6)
    updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)

    order   Order   @relation(fields: [orderId], references: [id])
    product Product @relation(fields: [productId], references: [id])

    @@map("tb_order_items")
}
